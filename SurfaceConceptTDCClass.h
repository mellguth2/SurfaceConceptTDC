/*----- PROTECTED REGION ID(SurfaceConceptTDCClass.h) ENABLED START -----*/
/*
 * The MIT License
 *
 * Copyright 2016-2018 Surface Concept GmbH
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

//=============================================================================
//
// file :        SurfaceConceptTDCClass.h
//
// description : Include for the SurfaceConceptTDC root class.
//               This class is the singleton class for
//                the SurfaceConceptTDC device class.
//               It contains all properties and methods which the 
//               SurfaceConceptTDC requires only once e.g. the commands.
//
// project :     SurfaceConceptTDC
//
// This file is part of Tango device class.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef SurfaceConceptTDCClass_H
#define SurfaceConceptTDCClass_H

#include <tango.h>
#include <SurfaceConceptTDC.h>


/*----- PROTECTED REGION END -----*/	//	SurfaceConceptTDCClass.h


namespace SurfaceConceptTDC_ns
{
/*----- PROTECTED REGION ID(SurfaceConceptTDCClass::classes for dynamic creation) ENABLED START -----*/

// My own commands inserted without POGO
class SaveXytToTiffClass : public Tango::Command
{
public:
	SaveXytToTiffClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SaveXytToTiffClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SaveXytToTiffClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
            {return (static_cast<SurfaceConceptTDC *>(dev))->is_SaveXytToTiff_allowed(any);}
};

class SaveXyToTiffClass : public Tango::Command
{
public:
	SaveXyToTiffClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SaveXyToTiffClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SaveXyToTiffClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
            {return (static_cast<SurfaceConceptTDC *>(dev))->is_SaveXyToTiff_allowed(any);}
};

class SaveXyToTextClass : public Tango::Command
{
public:
	SaveXyToTextClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SaveXyToTextClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SaveXyToTextClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
            {return (static_cast<SurfaceConceptTDC *>(dev))->is_SaveXyToText_allowed(any);}
};

class AccumStartAndSaveXYClass : public Tango::Command
{
public:
	AccumStartAndSaveXYClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AccumStartAndSaveXYClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AccumStartAndSaveXYClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
            {return (static_cast<SurfaceConceptTDC *>(dev))->is_AccumStartAndSaveXY_allowed(any);}
};

class AccumStartAndSaveXYTextClass : public Tango::Command
{
public:
	AccumStartAndSaveXYTextClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AccumStartAndSaveXYTextClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AccumStartAndSaveXYTextClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
            {return (static_cast<SurfaceConceptTDC *>(dev))->is_AccumStartAndSaveXYText_allowed(any);}
};
    
class AccumulationStartClass : public Tango::Command
{
public:
	AccumulationStartClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AccumulationStartClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AccumulationStartClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
            {return (static_cast<SurfaceConceptTDC *>(dev))->is_AccumulationStart_allowed(any);}
};

class AccumulationContinueClass : public Tango::Command
{
public:
	AccumulationContinueClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AccumulationContinueClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AccumulationContinueClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
            {return (static_cast<SurfaceConceptTDC *>(dev))->is_AccumulationContinue_allowed(any);}
};

class AccumulationStopClass : public Tango::Command
{
public:
	AccumulationStopClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AccumulationStopClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AccumulationStopClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
            {return (static_cast<SurfaceConceptTDC *>(dev))->is_AccumulationStop_allowed(any);}
};


/*----- PROTECTED REGION END -----*/	//	SurfaceConceptTDCClass::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute DeviceID class definition
class DeviceIDAttrib: public Tango::Attr
{
public:
	DeviceIDAttrib():Attr("DeviceID",
			Tango::DEV_LONG, Tango::READ) {};
	~DeviceIDAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SurfaceConceptTDC *>(dev))->read_DeviceID(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SurfaceConceptTDC *>(dev))->is_DeviceID_allowed(ty);}
};

//	Attribute ExposureLive class definition
class ExposureLiveAttrib: public Tango::Attr
{
public:
	ExposureLiveAttrib():Attr("ExposureLive",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~ExposureLiveAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SurfaceConceptTDC *>(dev))->read_ExposureLive(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SurfaceConceptTDC *>(dev))->write_ExposureLive(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SurfaceConceptTDC *>(dev))->is_ExposureLive_allowed(ty);}
};

//	Attribute ExposureAccu class definition
class ExposureAccuAttrib: public Tango::Attr
{
public:
	ExposureAccuAttrib():Attr("ExposureAccu",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~ExposureAccuAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SurfaceConceptTDC *>(dev))->read_ExposureAccu(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SurfaceConceptTDC *>(dev))->write_ExposureAccu(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SurfaceConceptTDC *>(dev))->is_ExposureAccu_allowed(ty);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command Start class definition
class StartClass : public Tango::Command
{
public:
	StartClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StartClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StartClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SurfaceConceptTDC *>(dev))->is_Start_allowed(any);}
};

//	Command Stop class definition
class StopClass : public Tango::Command
{
public:
	StopClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StopClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StopClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SurfaceConceptTDC *>(dev))->is_Stop_allowed(any);}
};

//	Command AcquisitionStart class definition
class AcquisitionStartClass : public Tango::Command
{
public:
	AcquisitionStartClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AcquisitionStartClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AcquisitionStartClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SurfaceConceptTDC *>(dev))->is_AcquisitionStart_allowed(any);}
};

//	Command AcquisitonStop class definition
class AcquisitonStopClass : public Tango::Command
{
public:
	AcquisitonStopClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AcquisitonStopClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AcquisitonStopClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SurfaceConceptTDC *>(dev))->is_AcquisitonStop_allowed(any);}
};


/**
 *	The SurfaceConceptTDCClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  SurfaceConceptTDCClass : public Tango::DeviceClass
#else
class SurfaceConceptTDCClass : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(SurfaceConceptTDCClass::Additionnal DServer data members) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	SurfaceConceptTDCClass::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static SurfaceConceptTDCClass *init(const char *);
		static SurfaceConceptTDCClass *instance();
		~SurfaceConceptTDCClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		SurfaceConceptTDCClass(string &);
		static SurfaceConceptTDCClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	SurfaceConceptTDC_H
